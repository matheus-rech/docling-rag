#!/usr/bin/env python3
"""
Test script for Visual Grounding RAG system
Tests all components before running the web interface
"""

import os
import sys
import subprocess
import time

def test_imports():
    """Test if all required modules can be imported"""
    print("üîç Testing imports...")
    try:
        import docling
        print("  ‚úÖ Docling")
        import faiss
        print("  ‚úÖ FAISS")
        import sentence_transformers
        print("  ‚úÖ Sentence Transformers")
        import langchain
        print("  ‚úÖ LangChain")
        import fastapi
        print("  ‚úÖ FastAPI")
        import streamlit
        print("  ‚úÖ Streamlit")
        import pandas
        print("  ‚úÖ Pandas")
        import matplotlib
        print("  ‚úÖ Matplotlib")
        return True
    except ImportError as e:
        print(f"  ‚ùå Import error: {e}")
        return False

def test_ollama():
    """Test Ollama installation"""
    print("\nü§ñ Testing Ollama...")
    try:
        result = subprocess.run(["ollama", "list"], capture_output=True, text=True)
        if result.returncode == 0:
            print("  ‚úÖ Ollama is running")
            if "deepseek" in result.stdout.lower():
                print("  ‚úÖ DeepSeek model found")
            else:
                print("  ‚ö†Ô∏è  DeepSeek not found - pulling model...")
                subprocess.run(["ollama", "pull", "deepseek-coder:latest"])
            return True
    except FileNotFoundError:
        print("  ‚ùå Ollama not found")
        return False

def test_pdf_processing():
    """Test basic PDF processing"""
    print("\nüìÑ Testing PDF processing...")
    try:
        from core.pdf_processor import PDFProcessor
        processor = PDFProcessor()
        
        # Check if sample.pdf exists
        if os.path.exists("sample.pdf"):
            print("  ‚úÖ Sample PDF found")
            with open("sample.pdf", "rb") as f:
                content = f.read()
            
            # Test processing
            print("  ‚è≥ Processing PDF (this may take a moment)...")
            result = processor.process(content)
            print(f"  ‚úÖ PDF processed: {result['num_chunks']} chunks created")
            return True
        else:
            print("  ‚ö†Ô∏è  sample.pdf not found")
            return False
    except Exception as e:
        print(f"  ‚ùå PDF processing error: {e}")
        return False

def test_vector_store():
    """Test vector store functionality"""
    print("\nüîç Testing vector store...")
    try:
        from core.vector_store import VectorStore
        store = VectorStore()
        
        # Test with dummy data
        class DummyChunk:
            def __init__(self, text):
                self.text = text
        
        chunks = [
            DummyChunk("Patient with cerebellar infarction"),
            DummyChunk("Treatment with SDC surgery"),
            DummyChunk("Outcome measures included")
        ]
        
        results = store.search("What is the treatment?", chunks, k=2)
        print(f"  ‚úÖ Vector search working: {len(results)} results found")
        return True
    except Exception as e:
        print(f"  ‚ùå Vector store error: {e}")
        return False

def run_demo():
    """Run a quick demo"""
    print("\nüéØ Running quick demo...")
    print("=" * 50)
    
    try:
        from core.pdf_processor import PDFProcessor
        from core.vector_store import VectorStore
        from medical.prompts import MedicalPrompts
        
        processor = PDFProcessor()
        vector_store = VectorStore()
        prompts = MedicalPrompts()
        
        if os.path.exists("sample.pdf"):
            print("üìÑ Processing sample.pdf...")
            with open("sample.pdf", "rb") as f:
                content = f.read()
            
            doc_result = processor.process(content)
            print(f"‚úÖ Created {doc_result['num_chunks']} chunks")
            
            # Search for medical information
            query = "What is the patient diagnosis and treatment?"
            print(f"\nüîç Query: '{query}'")
            
            chunks = doc_result['chunks']
            relevant = vector_store.search(query, chunks, k=3)
            
            print(f"\nüìä Found {len(relevant)} relevant chunks:")
            for i, chunk in enumerate(relevant[:2]):
                print(f"\nChunk {i+1}:")
                print(f"Text: {chunk.text[:150]}...")
                if hasattr(chunk, 'meta') and chunk.meta:
                    if hasattr(chunk.meta, 'doc_items') and chunk.meta.doc_items:
                        page = chunk.meta.doc_items[0].prov[0].page_no
                        print(f"üìç Location: Page {page}")
            
            print("\n‚úÖ Demo complete!")
            return True
    except Exception as e:
        print(f"‚ùå Demo error: {e}")
        return False

def main():
    print("üî¨ Visual Grounding RAG - System Test")
    print("=" * 50)
    
    # Run all tests
    tests = [
        ("Imports", test_imports),
        ("Ollama", test_ollama),
        ("PDF Processing", test_pdf_processing),
        ("Vector Store", test_vector_store)
    ]
    
    all_passed = True
    for name, test_func in tests:
        if not test_func():
            all_passed = False
    
    if all_passed:
        print("\n‚úÖ All tests passed!")
        
        # Run demo
        run_demo()
        
        print("\nüöÄ Ready to start the web interface!")
        print("\nChoose an option:")
        print("1. FastAPI interface (recommended)")
        print("2. Streamlit interface")
        print("3. Batch processing interface")
        print("4. Exit")
        
        choice = input("\nEnter your choice (1-4): ")
        
        if choice == "1":
            print("\nüåê Starting FastAPI interface...")
            print("üìç Open http://localhost:8000 in your browser")
            os.system("python -m uvicorn app:app --reload")
        elif choice == "2":
            print("\nüåê Starting Streamlit interface...")
            os.system("streamlit run streamlit_visual_app.py")
        elif choice == "3":
            print("\nüåê Starting batch processing interface...")
            print("üìç Open http://localhost:8001 in your browser")
            os.system("python -m uvicorn app_batch:app --reload --port 8001")
        else:
            print("\nExiting...")
    else:
        print("\n‚ùå Some tests failed. Please fix the issues above.")
        print("\nCommon fixes:")
        print("- Install Ollama: brew install ollama")
        print("- Pull model: ollama pull deepseek-coder:latest")
        print("- Install deps: pip install -r requirements.txt")

if __name__ == "__main__":
    main()